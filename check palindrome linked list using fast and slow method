#include<iostream>
using namespace std;
#include<bits/stdc++.h>
class node
{
    public:
    int data;
    node* next;
    node(int data)
    {
        this -> data = data;
        this -> next = NULL;
    }
};
void insert(node* &head,int data)
{
    node* newly = new node(data);
    while(head == NULL)
    {
        head = newly;
        return;
    }
    node* temp = head;
    while(temp -> next != NULL)
    {
        temp =temp -> next;
    }
    temp -> next = newly;
}
void print(node* &head)
{
    node* temp = head;
    while(temp != NULL )
    {
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }
    cout<<endl;
}
int count(node* &head)
{
    int c = 0;
    node* temp = head;
    while(temp != NULL )
    {
        c++;
        temp = temp -> next; 
    }
    return c;
}


node* middlelement(node* &head)
{
    if(head ==  NULL || head -> next == NULL)
    {
        return head;
    }
    node* fast = head ;
    node* slow = head;
    while((fast -> next != NULL) && (fast -> next -> next != NULL))       //next is for odd and next of next is for even
    {
        fast = fast -> next -> next;
        slow = slow -> next;
    }
    return slow;
}

node* reverse_after(node* &head)
{
    node* current = head;
    node* prev = NULL;
    node* forward;
    while(current != NULL)
    {
        forward = current -> next;
        current -> next = prev;
        prev = current;
        current = forward;
    }
    return prev;
}

int main()
{
    node* head = NULL;
    insert(head,1);
    insert(head,1);
    insert(head,3);
    insert(head,2);
    insert(head,1);
    insert(head,1);
    insert(head,1);
    cout<<"Lists..."<<endl;
    print(head);
    if((head == NULL) || (head -> next == NULL))
    {
        return true;
    }
    else
    {
        node *middle = middlelement(head);
      //cout<<"Middle element is = "<<middle -> data;
        middle -> next = reverse_after(middle -> next);
        bool ans = true;
        node* head1 =head;
        node* head2 = middle->next;
        while(head2 != NULL)
        {
            if(head1 -> data != head2 -> data)
            {
                ans = false;
                break;
            }   
            head1 = head1 -> next;
            head2 = head2 -> next;
        }
        if(ans == true)
        cout<<"palindrome";
        else
        cout<<"not palindrome";
    }
    
 
    return 0;
}
