class Solution {
  public:
  
    void left_traversal(Node* root,vector<int>& ans)
    {
        if(root==NULL)
        return;
        
        if(root->left==NULL && root->right==NULL)
        return ;
        
        ans.push_back(root->data);
        
        //if left exist karta toh woh boundary agr nii karta toh right dekhenge kyunki
        //eoh bhi boundary hogi na
        if(root->left)
        left_traversal(root->left,ans);
        
        else if(root->right)
        left_traversal(root->right,ans);
    }
  
    void leaf_traversal(Node* root,vector<int>& ans)
    {
        if(root==NULL)
        return;
        
        if(root->left==NULL && root->right==NULL )
        {
            ans.push_back(root->data);
            return;
        }
        
        leaf_traversal(root->left,ans);
        leaf_traversal(root->right,ans);
    }
  
    void right_traversal(Node* root,vector<int>& ans)
    {
        if(root==NULL)
        return;
        
        if(root->left==NULL && root->right==NULL)
        return ;
        
        if(root->right)
        right_traversal(root->right,ans);
        
        else if(root->left)
        right_traversal(root->left,ans);
        
        //jab back track hon tab value store hoti jaye
        ans.push_back(root->data);
    }
  
   
    void solve(Node* root,vector<int>& ans)
    {
        ans.push_back(root->data);
        //broken tree into left and right
        
        //left boundary traversal
        left_traversal(root->left,ans);
        
        //leaf node traversal -> left sub tree and right sub tree
        leaf_traversal(root->left,ans);
        leaf_traversal(root->right,ans);
        
        //right boundary traversal
        right_traversal(root->right,ans);
        
        
    }
  
    vector<int> boundaryTraversal(Node *root) {
        
        vector<int> ans;
        solve(root,ans);
        return ans;
        
    }
};
