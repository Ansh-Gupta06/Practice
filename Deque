#include <bits/stdc++.h> 
#include<iostream>
using namespace std;


#define element x
class Deque
{
public:
    int* arr;
    int size;
    int front;
    int rear;
    Deque(int n)
    {
        this->size = n;
        arr = new int[size];
        front = -1;
        rear = -1;
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        //overflow?
        if((front==0 && rear==size-1) || rear+1 == front)
        {
            //cout<<"Stack is full"<<endl;
            return false;
        }
        //No element are present
        else if(front==-1 && rear==-1)
        {
            front = rear = 0;
            arr[front] = element;
        }
        else if(front == 0)
        {
            front = size-1;
            arr[front] = element;
        }
        else
        {
            front--;
            arr[front] = element;
        }
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        //overflow?
        if((front==0 && rear==-1) || rear+1 == front)
        {
            //cout<<"Stack is full"<<endl;
            return false;
        }
        //No element are present
        else if(front==-1 && rear==-1)
        {
            front = rear = 0;
            arr[rear] = element;
        }
        else if(rear == size-1)
        {
            rear = 0;
            arr[rear] = element;
        }
        else
        {
            rear++;
            arr[rear] = element;
        }
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        if(front==-1 && rear==-1)
        {
            //cout<<"Underdflow Condition"<<endl;
            return -1;
        }
        else if(front == rear)
        {
            int del = arr[front];
            front = rear = -1;
            return del;
        }
        else if(front==size-1)
        {
            int del = arr[front];
            front = 0;
            return del;
        }
        else
        {
            int del = arr[front];
            front++;
            return del;
        }
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        if(front==-1 && rear==-1)
        {
            //cout<<"Underdflow Condition"<<endl;
            return -1;
        }
        else if(front == rear)
        {
            int del = arr[rear];
            front = rear = -1;
            return del;
        }
        else if(rear == 0)
        {
            int del = arr[rear];
            rear = size-1;
            return del;
        }
        else 
        {
            int del = arr[rear];
            rear--;
            return del;
        }
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if (front == -1 && rear == -1) 
        {
            // cout<<"Underflow conditon"<<endl;
            return -1;
        }
        return arr[front];
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
       if (front == -1 && rear == -1) {
            // cout<<"Underflow conditon"<<endl;
            return -1;
        }
        return arr[rear];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if (front == -1 && rear == -1) 
        {
            // cout<<"Underflow conditon"<<endl;
            return true;
        }
        return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if((front==0 && rear==size-1) || rear+1 == front)
        {
            //cout<<"Stack is full"<<endl;
            return true;
        }
        return false;
    }
    
};
//design kar lena main function
